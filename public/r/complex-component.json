{
  "$schema": "https://ui.adrianub.dev/schema/registry-item.json",
  "name": "complex-component",
  "type": "registry:component",
  "title": "Complex Component",
  "description": "A complex component showing services, libs and components.",
  "dependencies": [
    "zod"
  ],
  "registryDependencies": [
    "card"
  ],
  "files": [
    {
      "path": "registry/complex-component/page.ts",
      "content": "import { Component, inject, resource } from '@angular/core';\n\nimport { getPokemonList } from '~/registry/complex-component/services/pokemon.service';\nimport { PokemonCard } from '~/registry/complex-component/components/pokemon-card';\n\n@Component({\n  selector: 'PokemonPage',\n  imports: [PokemonCard],\n  template: `\n  <div class=\"mx-auto w-full max-w-2xl px-4\">\n    <div class=\"grid grid-cols-2 gap-4 py-10 sm:grid-cols-3 md:grid-cols-4\">\n      @for (pokemon of pokemons.value()?.results; track pokemon.name) {\n        <PokemonCard [name]=\"pokemon.name\" />\n      }\n    </div>\n  </div>`\n})\nexport class PokemonPage {\n  pokemons = resource({\n    loader: ({ abortSignal }) => getPokemonList({ limit: 12, abortSignal }),\n  })\n}\n",
      "type": "registry:page",
      "target": "app/pages/pokemon/page.ts"
    },
    {
      "path": "registry/complex-component/components/pokemon-card.ts",
      "content": "import { Component, input, resource } from '@angular/core';\n\nimport { UbCardDirective, UbCardContentDirective } from '~/components/ui/card'\nimport { getPokemon } from '~/registry/complex-component/services/pokemon.service';\nimport { PokemonImage } from '~/registry/complex-component/components/pokemon-image';\n\n@Component({\n  selector: 'PokemonCard',\n  imports: [UbCardDirective, UbCardContentDirective, PokemonImage],\n  template: `\n  @if(pokemonResource.value()) {\n    @let pokemon = pokemonResource.value()!;\n\n    <div ubCard>\n      <div ubCardContent>\n        <div>\n          <PokemonImage [name]=\"pokemon.name\" [number]=\"pokemon.id\" />\n        </div>\n        <div class=\"text-center font-medium\">{{pokemon.name}}</div>\n      </div>\n    </div>\n  }\n  `\n})\nexport class PokemonCard {\n  name = input.required<string>();\n\n  pokemonResource = resource({\n    request: this.name,\n    loader: ({ request, abortSignal }) => getPokemon({ name: request, abortSignal }),\n  })\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/complex-component/components/pokemon-image.ts",
      "content": "import { Component, input } from '@angular/core';\nimport { PokemonImagePipe } from '~/registry/complex-component/utils/pokemon-image.pipe';\n\n@Component({\n  selector: 'PokemonImage',\n  imports: [PokemonImagePipe],\n  template: `\n    <img [src]=\"number() | pokemonImage\" [alt]=\"name()\" />\n  `\n})\nexport class PokemonImage {\n  name = input.required<string>();\n  number = input.required<number>();\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/complex-component/lib/pokemon-image.pipe.ts",
      "content": "import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'pokemonImage'\n})\nexport class PokemonImagePipe implements PipeTransform {\n  transform(number: number): string {\n    return `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${number}.png`\n  }\n}\n",
      "type": "registry:lib"
    },
    {
      "path": "registry/complex-component/services/pokemon.service.ts",
      "content": "import { z } from 'zod';\n\nexport async function getPokemonList({ limit = 10, abortSignal }: { limit?: number, abortSignal: AbortSignal }) {\n  try {\n    const response = await fetch(\n      `https://pokeapi.co/api/v2/pokemon?limit=${limit}`, { signal: abortSignal }\n    )\n    return z\n      .object({\n        results: z.array(z.object({ name: z.string() })),\n      })\n      .parse(await response.json())\n  } catch (error) {\n    console.error(error)\n    return null\n  }\n}\n\nexport async function getPokemon({ name, abortSignal }: { name: string, abortSignal: AbortSignal }) {\n  try {\n    const response = await fetch(`https://pokeapi.co/api/v2/pokemon/${name}`, { signal: abortSignal })\n\n    if (!response.ok) {\n      throw new Error(\"Failed to fetch pokemon\")\n    }\n\n    return z\n      .object({\n        name: z.string(),\n        id: z.number(),\n        sprites: z.object({\n          front_default: z.string(),\n        }),\n        stats: z.array(\n          z.object({\n            base_stat: z.number(),\n            stat: z.object({\n              name: z.string(),\n            }),\n          })\n        ),\n      })\n      .parse(await response.json())\n  } catch (error) {\n    console.error(error)\n    return null\n  }\n}\n",
      "type": "registry:service"
    }
  ]
}